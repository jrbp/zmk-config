* keymap
#+NAME: Layers
| Base     |
| Base_HRM |
| Mod_L    |
| Mod_R    |
| Num      |
| Nav      |
| Media    |
| Fun      |
| Mouse    |

#+NAME: Base
| &none | &kp Q | &kp W | &kp E                 | &kp R                      | &kp T                          | &kp Y               | &kp U                     | &kp I                 | &kp O   | &kp P    | &none |
| &none | &kp A | &kp S | &kp D                 | &kp F                      | &kp G                          | &kp H               | &kp J                     | &kp K                 | &kp L   | &kp SQT  | &none |
| &none | &kp Z | &kp X | &kp C                 | &kp V                      | &kp B                          | &kp N               | &kp M                     | &kp COMMA             | &kp DOT | &kp FSLH | &none |
|       |       |       | &u_lt LAYER_MEDIA ESC | &u_lt_spc LAYER_NAV  SPACE | &u_shftlt_hold LAYER_MOD_L TAB | &shftmo LAYER_MOD_R | &u_lt_hold LAYER_NUM BSPC | &u_lt LAYER_FUN ENTER |         |          |       |

#+NAME: Base_HRM
| &none | &trans        | &trans        | &trans         | &trans         | &trans                | &trans     | &trans         | &trans         | &trans        | &trans          | &none |
| &none | &u_mtl LGUI A | &u_mtl LALT S | &u_mtl LCTRL D | &u_mtl LSHFT F | &trans                | &trans     | &u_mtr LSHFT J | &u_mtr LCTRL K | &u_mtr LALT L | &u_mtr LGUI SQT | &none |
| &none | &trans        | &trans        | &trans         | &trans         | &trans                | &trans     | &trans         | &trans         | &trans        | &trans          | &none |
|       |               |               | &trans         | &trans         | &u_lt LAYER_MOUSE TAB | &kp LSHIFT | &trans         | &trans         |               |                 |       |


#+NAME: Mod_L
| &none | &trans    | &trans    | &trans    | &trans    | &trans | &trans | &trans | &trans | &trans | &trans | &none |
| &none | &mm_hrm_a | &mm_hrm_s | &mm_hrm_d | &mm_hrm_f | &trans | &trans | &trans | &trans | &trans | &trans | &none |
| &none | &trans    | &trans    | &trans    | &trans    | &trans | &trans | &trans | &trans | &trans | &trans | &none |
|       |           |           | &trans    | &trans    | &none  | &trans | &trans | &trans |        |        |       |

#+NAME: Mod_R
| &none | &trans | &trans | &trans | &trans | &trans | &trans | &trans    | &trans    | &trans    | &trans       | &none |
| &none | &trans | &trans | &trans | &trans | &trans | &trans | &mm_hrm_j | &mm_hrm_k | &mm_hrm_l | &mm_hrm_apos | &none |
| &none | &trans | &trans | &trans | &trans | &trans | &trans | &trans    | &trans    | &trans    | &trans       | &none |
|       |        |        | &trans | &trans | &trans | &none  | &trans    | &trans    |           |              |       |

#+NAME: Num
| &none | &kp LEFT_BRACKET | &kp NUMBER_7 | &kp NUMBER_8 | &kp NUMBER_9 | &kp RIGHT_BRACKET | &none  | &none      | &none     | &none        | &none        | &none |
| &none | &kp SEMICOLON    | &kp NUMBER_4 | &kp NUMBER_5 | &kp NUMBER_6 | &kp EQUAL         | &none  | &kp LSHIFT | &kp LCTRL | &kp LEFT_ALT | &kp LEFT_GUI | &none |
| &none | &kp GRAVE        | &kp NUMBER_1 | &kp NUMBER_2 | &kp NUMBER_3 | &kp BACKSLASH     | &none  | &none      | &none     | &none        | &none        | &none |
|       |                  |              | &kp PERIOD   | &kp NUMBER_0 | &kp MINUS         | &trans | &none      | &trans    |              |              |       |

#+NAME: Nav
| &none | &none        | &none        | &none     | &none           | &none  | &none    | &none      | &none     | &none     | &none        | &none |
| &none | &kp LEFT_GUI | &kp LEFT_ALT | &kp LCTRL | &kp LSHIFT      | &none  | &kp LEFT | &kp DOWN   | &kp UP    | &kp RIGHT | &u_caps_word | &none |
| &none | &none        | &none        | &none     | &mo LAYER_MOUSE | &none  | &kp HOME | &kp PG_DN  | &kp PG_UP | &kp END   | &none        | &none |
|       |              |              | &trans    | &none           | &trans | &trans   | &kp DELETE | &trans    |           |              |       |

#+NAME: Media
| &none | &none    | &none    | &none     | &none     | &none  | &none       | &none        | &none        | &none       | &none      | &none |
| &none | &kp LGUI | &kp LALT | &kp LCTRL | &kp LSHFT | &none  | &kp C_PREV  | &kp C_VOL_DN | &kp C_VOL_UP | &kp C_NEXT  | &u_ep_tog  | &none |
| &none | &none    | &kp RALT | &none     | &none     | &none  | &u_bt_sel_0 | &u_bt_sel_1  | &u_bt_sel_2  | &u_bt_sel_3 | &u_out_tog | &none |
|       |          |          | &none     | &trans    | &trans | &kp C_STOP  | &kp C_PP     | &kp C_MUTE   |             |            |       |

#+NAME: Fun
| &none | &kp F12 | &kp F7 | &kp F8    | &kp F9 | &kp PSCRN       | &layer_on LAYER_BASE_HRM | &layer_off LAYER_BASE_HRM | &none     | &none    | &none    | &none |
| &none | &kp F11 | &kp F4 | &kp F5    | &kp F6 | &kp SLCK        | &none                    | &kp LSHFT                 | &kp LCTRL | &kp LALT | &kp LGUI | &none |
| &none | &kp F10 | &kp F1 | &kp F2    | &kp F3 | &kp PAUSE_BREAK | &none                    | &none                     | &none     | &kp RALT | &none    | &none |
|       |         |        | &kp K_APP | &trans | &trans          | &trans                   | &trans                    | &none     |          |          |       |

#+NAME: Mouse
| &none | &none    | &none    | &none     | &none     | &none | &none          | &none          | &none        | &none           | &none | &none |
| &none | &kp LGUI | &kp LALT | &kp LCTRL | &kp LSHFT | &none | &mmv MOVE_LEFT | &mmv MOVE_DOWN | &mmv MOVE_UP | &mmv MOVE_RIGHT | &none | &none |
| &none | &none    | &kp RALT | &none     | &none     | &none | &msc SCRL_LEFT | &msc SCRL_DOWN | &msc SCRL_UP | &msc SCRL_RIGHT | &none | &none |
|       |          |          | &trans    | &trans    | &none | &mkp MB2       | &mkp MB1       | &mkp MB3     |                 |       |       |

* behaviors
at some point could script some of the tedious bits

#+NAME:behaviors
#+begin_example
  behaviors {
    mt_hrm_alt: mt_hrm_alt {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <175>;
      flavor = "hold-preferred";
      bindings = < &kp >, < &shftkp >;
    };
    mt_hrm: mt_hrm {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <175>;
      flavor = "hold-preferred";
      hold-while-undecided;
      bindings = < &kp >, < &shftkp >;
    };
    mm_hrm_f: mm_hrm_f {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp F>, <&mt_hrm RSHIFT F>;
      mods = <(MOD_LSFT)>;
    };
    mm_hrm_d: mm_hrm_d {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp D>, <&mt_hrm LCTRL D>;
      mods = <(MOD_LSFT)>;
    };
    mm_hrm_s: mm_hrm_s {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp S>, <&mt_hrm_alt LALT S>;
      mods = <(MOD_LSFT)>;
    };
    mm_hrm_a: mm_hrm_a {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp A>, <&mt_hrm LGUI A>;
      mods = <(MOD_LSFT)>;
    };

    mm_hrm_j: mm_hrm_j {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp J>, <&mt_hrm RSHIFT J>;
      mods = <(MOD_LSFT)>;
    };
    mm_hrm_k: mm_hrm_k {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp K>, <&mt_hrm LCTRL K>;
      mods = <(MOD_LSFT)>;
    };
    mm_hrm_l: mm_hrm_l {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp L>, <&mt_hrm_alt LALT L>;
      mods = <(MOD_LSFT)>;
    };
    mm_hrm_apos: mm_hrm_apos {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp APOS>, <&mt_hrm LGUI APOS>;
      mods = <(MOD_LSFT)>;
    };
    u_ep_tog: u_ep_tog {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &ext_power EP_TOG >, < &ext_power EP_OFF >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_0: u_bt_sel_0 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 0 >, < &bt_clr_0 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_1: u_bt_sel_1 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 1 >, < &bt_clr_1 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_2: u_bt_sel_2 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 2 >, < &bt_clr_2 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_3: u_bt_sel_3 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 3 >, < &bt_clr_3 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_4: u_bt_sel_4 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 4 >, < &bt_clr_4 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_out_tog: u_out_tog {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &out OUT_TOG >, < &out OUT_USB >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_caps_word: u_caps_word {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &caps_word >, <&kp CAPSLOCK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_mtl: u_mtl {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <280>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <200>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <TIMERLESS_RIGHT TIMERLESS_THUMBS>;
      hold-trigger-on-release;
    };
    u_mtr: u_mtr {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <280>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <200>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <TIMERLESS_LEFT TIMERLESS_THUMBS>;
      hold-trigger-on-release;
    };
    u_lt: u_lt {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&kp>;
    };
    u_lt_hold: u_lt_hold {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      flavor = "hold-preferred";
      bindings = <&mo>, <&kp>;
      quick-tap-ms = <175>;
    };
    u_shftlt_hold: u_shftlt_hold {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      flavor = "hold-preferred";
      bindings = <&shftmo>, <&kp>;
      quick-tap-ms = <175>;
    };
    u_lt_spc: u_lt_spc {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      require-prior-idle-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&kp>;
    };
    layer_on: layer_on {
      compatible = "zmk,behavior-toggle-layer";
      #binding-cells = <1>;
      display-name = "Toggle Layer On";
      toggle-mode = "on";
    };
    layer_off: layer_off {
      compatible = "zmk,behavior-toggle-layer";
      #binding-cells = <1>;
      display-name = "Toggle Layer Off";
      toggle-mode = "off";
    };
  };
#+end_example

* macros
Why must I release left shift twice in shftmo? At first I thought it was because
I was using LS(key) in the mod-morph and that does hold shift down so I made the
shftkp macro to make the extra mod [[https://github.com/zmkfirmware/zmk/issues/86][explicit]]. That didn't fix it. I'm leaving the double release for now.

#+NAME:macros
#+begin_example
  macros {
  shftkp: shftkp {
      compatible = "zmk,behavior-macro-one-param";
      wait-ms = <20>;
      tap-ms = <20>;
      #binding-cells = <1>;
      bindings
        = <&macro_press &kp LSHIFT>
        , <&macro_param_1to1>
        , <&macro_tap &kp MACRO_PLACEHOLDER>
        , <&macro_release &kp LSHIFT>
        ;
  };
  shftmo: shftmo {
      compatible = "zmk,behavior-macro-one-param";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <1>;
      bindings
        = <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_press &kp LSHIFT>
        , <&macro_pause_for_release>
        , <&macro_release &kp LSHIFT>
        , <&macro_release &kp LSHIFT>
        , <&macro_param_1to1>
        , <&macro_release &mo MACRO_PLACEHOLDER>
        ;
    };
  bt_clr_0: bt_clr_0 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 0 &bt BT_CLR >;
    };
  bt_clr_1: bt_clr_1 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 1 &bt BT_CLR >;
    };
  bt_clr_2: bt_clr_2 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 2 &bt BT_CLR >;
    };
  bt_clr_3: bt_clr_3 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 3 &bt BT_CLR >;
    };
  bt_clr_4: bt_clr_4 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 4 &bt BT_CLR >;
    };
  };
#+end_example

* toconfig

#+begin_src elisp :var col_layers=Layers :results value file :file "corne.keymap"
(defun layer_idx_includes (layer_names)
  (string-join
   (seq-map-indexed
    (lambda (lyr lyr_idx)
      (format "#define LAYER_%s %d" (upcase lyr) lyr_idx)
      ) layer_names)
   "\n"))

(defun lyrtbl-keymap-part (lyr_name)
  (let* ((table (org-babel-ref-resolve lyr_name))
         (widths (mapcar (lambda (n)
                           (apply #'max (mapcar (lambda (row)
                                                  (length (nth n row)))
                                                table)))
                         (number-sequence 0 (1- (length (car table)))))))
    (string-join
     (mapcar (lambda (row)
               (string-join (cl-mapcar (lambda (cell width)
                                         (format (format "%%-%ds" width) cell))
                                       row widths)
                            "  "))
             table)
     "\n")))

(defun lyr_keymap (lyr_name)
  (format "    %s {\n        bindings = <\n%s\n        >;    \n    };\n" lyr_name (lyrtbl-keymap-part lyr_name)))

(defun layers_keymap (layer_names)
  (concat "  keymap {\n    compatible = \"zmk,keymap\";\n\n"
  (string-join (mapcar #'lyr_keymap layer_names) "\n")
  "  };\n"))

(defun tbl_transpose (tbl)
  (apply #'cl-mapcar #'list tbl))

(let ((layers (car (tbl_transpose col_layers))))
  (concat "\
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1250
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TIMERLESS_THUMBS 36 37 38 39 40 41
#define TIMERLESS_LEFT  1 2 3 4  5    13 14 15 16 17   25 26 27 28 29
#define TIMERLESS_RIGHT 6 7 8 9 10    18 19 20 21 22   30 31 32 33 34\n"
   (layer_idx_includes layers)
   "\n/ {\n"
   (org-babel-ref-resolve "behaviors")
   "\n"
   (layers_keymap layers)
   "\n"
   (org-babel-ref-resolve "macros")
   "\n};"
   ))
#+end_src

#+RESULTS:
[[file:corne.keymap]]
