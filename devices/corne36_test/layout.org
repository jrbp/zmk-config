* keymap
#+NAME: Layers
| Base     |
| Num      |
| Nav      |
| Media    |
| Fun      |
| Mouse    |

#+NAME: Base
| &none | &kp Q | &kp W | &kp E   | &kp R     | &kp T         | &kp Y         | &kp U      | &kp I     | &kp O   | &kp P    | &none |
| &none | &kp A | &kp S | &kp D   | &kp F     | &kp G         | &kp H         | &kp J      | &kp K     | &kp L   | &kp SQT  | &none |
| &none | &kp Z | &kp X | &kp C   | &kp V     | &kp B         | &kp N         | &kp M      | &kp COMMA | &kp DOT | &kp FSLH | &none |
|       |       |       | &kp ESC | &kp SPACE | &mo LAYER_NAV | &mo LAYER_NUM | &kp LSHIFT | &kp ENTER |         |          |       |

#+NAME: Num
| &none | &kp LEFT_BRACKET | &kp NUMBER_7 | &kp NUMBER_8 | &kp NUMBER_9 | &kp RIGHT_BRACKET | &none         | &none      | &none     | &none        | &none    | &none |
| &none | &kp SEMICOLON    | &kp NUMBER_4 | &kp NUMBER_5 | &kp NUMBER_6 | &kp EQUAL         | &mo LAYER_FUN | &kp LSHIFT | &kp LCTRL | &kp LEFT_ALT | &kp LGUI | &none |
| &none | &kp GRAVE        | &kp NUMBER_1 | &kp NUMBER_2 | &kp NUMBER_3 | &kp BACKSLASH     | &none         | &none      | &trans    | &trans       | &trans   | &none |
|       |                  |              | &kp PERIOD   | &kp NUMBER_0 | &kp MINUS         | &trans        | &none      | &trans    |              |          |       |

#+NAME: Nav
| &none | &none    | &none        | &none     | &none           | &none           | &none    | &none     | &none      | &none     | &none        | &none |
| &none | &kp LGUI | &kp LEFT_ALT | &kp LCTRL | &kp LSHIFT      | &mo LAYER_MEDIA | &kp LEFT | &kp DOWN  | &kp UP     | &kp RIGHT | &u_caps_word | &none |
| &none | &none    | &none        | &none     | &mo LAYER_MOUSE | &none           | &kp HOME | &kp PG_DN | &kp PG_UP  | &kp END   | &none        | &none |
|       |          |              | &trans    | &none           | &trans          | &kp TAB  | &kp BKSPC | &kp DELETE |           |              |       |

#+NAME: Media
| &none | &none    | &none    | &none     | &none      | &none  | &none       | &none        | &none        | &none       | &none      | &none |
| &none | &kp LGUI | &kp LALT | &kp LCTRL | &kp LSHIFT | &none  | &kp C_PREV  | &kp C_VOL_DN | &kp C_VOL_UP | &kp C_NEXT  | &u_ep_tog  | &none |
| &none | &none    | &kp RALT | &none     | &none      | &none  | &u_bt_sel_0 | &u_bt_sel_1  | &u_bt_sel_2  | &u_bt_sel_3 | &u_out_tog | &none |
|       |          |          | &none     | &trans     | &trans | &kp C_STOP  | &kp C_PP     | &kp C_MUTE   |             |            |       |

#+NAME: Fun
| &none | &kp F12 | &kp F7 | &kp F8    | &kp F9 | &kp PSCRN       | &none  | &none      | &none     | &none    | &none    | &none |
| &none | &kp F11 | &kp F4 | &kp F5    | &kp F6 | &kp SLCK        | &none  | &kp LSHIFT | &kp LCTRL | &kp LALT | &kp LGUI | &none |
| &none | &kp F10 | &kp F1 | &kp F2    | &kp F3 | &kp PAUSE_BREAK | &none  | &none      | &none     | &kp RALT | &none    | &none |
|       |         |        | &kp K_APP | &trans | &trans          | &trans | &trans     | &none     |          |          |       |

#+NAME: Mouse
| &none | &none    | &none    | &none     | &none      | &none | &none          | &none          | &none        | &none           | &none | &none |
| &none | &kp LGUI | &kp LALT | &kp LCTRL | &kp LSHIFT | &none | &mmv MOVE_LEFT | &mmv MOVE_DOWN | &mmv MOVE_UP | &mmv MOVE_RIGHT | &none | &none |
| &none | &none    | &kp RALT | &none     | &none      | &none | &msc SCRL_LEFT | &msc SCRL_DOWN | &msc SCRL_UP | &msc SCRL_RIGHT | &none | &none |
|       |          |          | &trans    | &trans     | &none | &mkp MB2       | &mkp MB1       | &mkp MB3     |                 |       |       |

* behaviors
#+NAME:behaviors
#+begin_example
  behaviors {
    u_ep_tog: u_ep_tog {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &ext_power EP_TOG >, < &ext_power EP_OFF >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_0: u_bt_sel_0 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 0 >, < &bt_clr_0 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_1: u_bt_sel_1 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 1 >, < &bt_clr_1 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_2: u_bt_sel_2 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 2 >, < &bt_clr_2 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_3: u_bt_sel_3 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 3 >, < &bt_clr_3 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_4: u_bt_sel_4 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 4 >, < &bt_clr_4 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_out_tog: u_out_tog {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &out OUT_TOG >, < &out OUT_USB >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_caps_word: u_caps_word {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &caps_word >, <&kp CAPSLOCK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };
#+end_example

* macros
Why must I release left shift twice in shftmo? At first I thought it was because
I was using LS(key) in the mod-morph and that does hold shift down so I made the
shftkp macro to make the extra mod [[https://github.com/zmkfirmware/zmk/issues/86][explicit]]. That didn't fix it. I'm leaving the double release for now.

#+NAME:macros
#+begin_example
  macros {
  bt_clr_0: bt_clr_0 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 0 &bt BT_CLR >;
    };
  bt_clr_1: bt_clr_1 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 1 &bt BT_CLR >;
    };
  bt_clr_2: bt_clr_2 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 2 &bt BT_CLR >;
    };
  bt_clr_3: bt_clr_3 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 3 &bt BT_CLR >;
    };
  bt_clr_4: bt_clr_4 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 4 &bt BT_CLR >;
    };
  };
#+end_example

* include defines
#+NAME: includedefines
#+begin_example
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1250
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#+end_example


* to config

#+begin_src elisp :var col_layers=Layers :results value file :file "corne.keymap"
(defun layer_idx_includes (layer_names)
  (string-join
   (seq-map-indexed
    (lambda (lyr lyr_idx)
      (format "#define LAYER_%s %d" (upcase lyr) lyr_idx)
      ) layer_names)
   "\n"))

(defun lyrtbl-keymap-part (lyr_name)
  (let* ((table (org-babel-ref-resolve lyr_name))
         (widths (mapcar (lambda (n)
                           (apply #'max (mapcar (lambda (row)
                                                  (length (nth n row)))
                                                table)))
                         (number-sequence 0 (1- (length (car table)))))))
    (string-join
     (mapcar (lambda (row)
               (string-join (cl-mapcar (lambda (cell width)
                                         (format (format "%%-%ds" width) cell))
                                       row widths)
                            "  "))
             table)
     "\n")))

(defun lyr_keymap (lyr_name)
  (format "    %s {\n        bindings = <\n%s\n        >;    \n    };\n" lyr_name (lyrtbl-keymap-part lyr_name)))

(defun layers_keymap (layer_names)
  (concat "  keymap {\n    compatible = \"zmk,keymap\";\n\n"
  (string-join (mapcar #'lyr_keymap layer_names) "\n")
  "  };\n"))

(defun tbl_transpose (tbl)
  (apply #'cl-mapcar #'list tbl))

(let ((layers (car (tbl_transpose col_layers))))
  (concat
   (org-babel-ref-resolve "includedefines")
   "\n"
   (layer_idx_includes layers)
   "\n/ {\n"
   (org-babel-ref-resolve "behaviors")
   "\n"
   (layers_keymap layers)
   "\n"
   (org-babel-ref-resolve "macros")
   "\n};"
   ))
#+end_src

#+RESULTS:
[[file:corne.keymap]]
