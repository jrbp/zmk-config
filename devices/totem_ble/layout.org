* keymap


#+NAME: Layers
| Base  |
| Nav   |
| Num   |
| Media |
| Fun   |
| Mouse |


#+NAME: Base
|              | &kp Q | &kp W | &kp E   | &kp R     | &kp T         | &kp Y      | &kp U          | &kp I     | &kp O   | &kp P    |              |
|              | &kp A | &kp S | &kp D   | &kp F     | &kp G         | &kp H      | &kp J          | &kp K     | &kp L   | &kp SQT  |              |
| &kp K_CANCEL | &kp Z | &kp X | &kp C   | &kp V     | &kp B         | &kp N      | &kp M          | &kp COMMA | &kp DOT | &kp FSLH | &kp K_CANCEL |
|              |       |       | &kp ESC | &kp SPACE | &mo LAYER_NAV | &kp LSHIFT | &smo LAYER_NUM | &kp BSPC  |         |          |              |

#+NAME: Nav
|                | &kp LS(TAB) | &kp TAB      | &kp ENTER | &none        | &mo LAYER_MEDIA | &none    | &none     | &none      | &none     | &none        |       |
|                | &sk LSHIFT  | &sk LEFT_ALT | &sk LCTRL | &sk LGUI     | &mo LAYER_MOUSE | &kp LEFT | &kp DOWN  | &kp UP     | &kp RIGHT | &u_caps_word |       |
| &tln LAYER_NUM | &none       | &kp LA(X)    | &kp LC(C) | &kp K_CANCEL | &none           | &kp HOME | &kp PG_DN | &kp PG_UP  | &kp END   | &none        | &none |
|                |             |              | &trans    | &trans       | &none           | &trans   | &trans    | &kp DELETE |           |              |       |

#+NAME: Num
|                | &kp LEFT_BRACKET | &kp NUMBER_7 | &kp NUMBER_8 | &kp NUMBER_9 | &kp RIGHT_BRACKET | &mo LAYER_FUN | &kp TAB   | &kp ESC   | &kp BSPC     | &kp DEL    |       |
|                | &kp SEMICOLON    | &kp NUMBER_4 | &kp NUMBER_5 | &kp NUMBER_6 | &kp EQUAL         | &none         | &sk LGUI  | &sk LCTRL | &sk LEFT_ALT | &sk LSHIFT |       |
| &tlf LAYER_NUM | &kp GRAVE        | &kp NUMBER_1 | &kp NUMBER_2 | &kp NUMBER_3 | &kp BACKSLASH     | &none         | &kp ENTER | &trans    | &trans       | &trans     | &none |
|                |                  |              | &mm_dotlpar  | &kp NUMBER_0 | &kp MINUS         | &trans        | &ks SPACE | &trans    |              |            |       |

#+NAME: Media
|       | &none      | &none    | &none     | &none    | &none  | &none       | &none        | &none        | &none       | &u_out_tog  |       |
|       | &sk LSHIFT | &sk LALT | &sk LCTRL | &sk LGUI | &none  | &kp C_PREV  | &kp C_VOL_DN | &kp C_VOL_UP | &kp C_NEXT  | &none       |       |
| &none | &none      | &kp RALT | &none     | &none    | &none  | &u_bt_sel_0 | &u_bt_sel_1  | &u_bt_sel_2  | &u_bt_sel_3 | &u_bt_sel_4 | &none |
|       |            |          | &none     | &trans   | &trans | &kp C_STOP  | &kp C_PP     | &kp C_MUTE   |             |             |       |

#+NAME: Fun
|       | &kp F12 | &kp F7 | &kp F8    | &kp F9 | &kp PSCRN       | &none  | &none    | &none     | &none    | &none      |       |
|       | &kp F11 | &kp F4 | &kp F5    | &kp F6 | &kp SLCK        | &none  | &sk LGUI | &sk LCTRL | &sk LALT | &sk LSHIFT |       |
| &none | &kp F10 | &kp F1 | &kp F2    | &kp F3 | &kp PAUSE_BREAK | &none  | &none    | &none     | &kp RALT | &none      | &none |
|       |         |        | &kp K_APP | &trans | &trans          | &trans | &trans   | &none     |          |            |       |

#+NAME: Mouse
|       | &none      | &none    | &none     | &none    | &none | &none          | &none          | &none        | &none           | &none |       |
|       | &sk LSHIFT | &sk LALT | &sk LCTRL | &sk LGUI | &none | &mmv MOVE_LEFT | &mmv MOVE_DOWN | &mmv MOVE_UP | &mmv MOVE_RIGHT | &none |       |
| &none | &none      | &kp RALT | &none     | &none    | &none | &msc SCRL_LEFT | &msc SCRL_DOWN | &msc SCRL_UP | &msc SCRL_RIGHT | &none | &none |
|       |            |          | &trans    | &trans   | &none | &mkp MB2       | &mkp MB1       | &mkp MB3     |                 |       |       |


* behaviors

#+NAME:behaviors
#+begin_example
  behaviors {
    u_bt_sel_0: u_bt_sel_0 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 0 >, < &bt_clr_0 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_1: u_bt_sel_1 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 1 >, < &bt_clr_1 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_2: u_bt_sel_2 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 2 >, < &bt_clr_2 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_3: u_bt_sel_3 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 3 >, < &bt_clr_3 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_bt_sel_4: u_bt_sel_4 {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &bt BT_SEL 4 >, < &bt_clr_4 >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    tln: tln {
      compatible = "zmk,behavior-toggle-layer";
      #binding-cells = <1>;
      display-name = "Toggle Layer On";
      toggle-mode = "on";
    };
    tlf: tlf {
      compatible = "zmk,behavior-toggle-layer";
      #binding-cells = <1>;
      display-name = "Toggle Layer Off";
      toggle-mode = "off";
    };
    mm_dotlpar: mm_dotlpar {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp LPAR>;
      mods = <(MOD_LSFT)>;
    };
    u_out_tog: u_out_tog {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &out OUT_TOG >, < &out OUT_USB >;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    u_caps_word: u_caps_word {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = < &caps_word >, <&kp CAPSLOCK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };
#+end_example


** generating some with elisp


#+NAME:otherbehaviors
#+begin_example
  tln: tln {
    compatible = "zmk,behavior-toggle-layer";
    #binding-cells = <1>;
    display-name = "Toggle Layer On";
    toggle-mode = "on";
  };
  tlf: tlf {
    compatible = "zmk,behavior-toggle-layer";
    #binding-cells = <1>;
    display-name = "Toggle Layer Off";
    toggle-mode = "off";
  };
#+end_example

#+begin_src elisp
(cl-defun zmk-org-mod-morph (name base withmod &optional (mods '("LSFT" "RSFT")) (binding name))
  "Make a mod-morph device tree entry.
Provide the NAME which is also the default BINDING.
BASE is the behavior without any of the MODS, while WITHMOD is the
behavior with MODS held. MODS are given as a list with available values of
`LSFT' `RSFT' `LCTL' `RCTL' `LALT' `RALT' `LGUI' `RGUI'"
  (let ((fmods (mapconcat (apply-partially #'format "MOD_%s") mods "|"))
        (templ (s-join "\n" '("  %s: %s {"
                              "    compatible = \"zmk,behavior-mod-morph\";"
                              "    #binding-cells = <0>;"
                              "    bindings = <%s>, <%s>;"
                              "    mods = <(%s)>;"
                              "  };"))))
    (format templ binding name base withmod fmods)))

(defun mapsplat (fun seq)
  "Map a SPLAT'ed version of FUN over SEQ."
  (mapcar (lambda (args) (apply fun args)) seq))
(defun map-cartesian-product (fun seqa seqb)
  "FUN over all combinations of SEQA and SEQB."
  (mapcar (lambda (sb)
            (mapcar (lambda (sa) (funcall fun sa sb)) seqa))
          seqb))

(let* ((modargs '(("mm_dotlpar" "&kp DOT" "&kp LPAR" ("LSFT"))
                  ("u_out_tog" "&out OUT_TOG" " &out OUT_USB")
                  ("u_caps_word" "&caps_word" "&kp CAPSLOCK")))
       (bt_bhvs (map-cartesian-product #'format
                                       '("u_bt_sel_%d" "&bt BT_SEL %d" "&bt_clr_%d")
                                       (number-sequence 0 4)))
       (mod-morphs (mapsplat #'zmk-org-mod-morph (append modargs bt_bhvs)))
       (other (list (org-babel-ref-resolve "otherbehaviors"))))
  (format "behaviors {\n%s\n};" (s-join "\n" (append mod-morphs other))))
#+end_src

#+RESULTS:
#+begin_example
behaviors {
  mm_dotlpar: mm_dotlpar {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp DOT>, <&kp LPAR>;
    mods = <(MOD_LSFT)>;
  };
  u_out_tog: u_out_tog {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&out OUT_TOG>, < &out OUT_USB>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  u_caps_word: u_caps_word {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&caps_word>, <&kp CAPSLOCK>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  u_bt_sel_0: u_bt_sel_0 {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&bt BT_SEL 0>, <&bt_clr_0>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  u_bt_sel_1: u_bt_sel_1 {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&bt BT_SEL 1>, <&bt_clr_1>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  u_bt_sel_2: u_bt_sel_2 {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&bt BT_SEL 2>, <&bt_clr_2>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  u_bt_sel_3: u_bt_sel_3 {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&bt BT_SEL 3>, <&bt_clr_3>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  u_bt_sel_4: u_bt_sel_4 {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&bt BT_SEL 4>, <&bt_clr_4>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  tln: tln {
    compatible = "zmk,behavior-toggle-layer";
    #binding-cells = <1>;
    display-name = "Toggle Layer On";
    toggle-mode = "on";
  };
  tlf: tlf {
    compatible = "zmk,behavior-toggle-layer";
    #binding-cells = <1>;
    display-name = "Toggle Layer Off";
    toggle-mode = "off";
  };

};
#+end_example


* macros

#+NAME:macros
#+begin_example
  macros {
  smo: smo {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      wait-ms = <0>;
      tap-ms = <0>;
      bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_param_1to1>
        , <&macro_release &mo MACRO_PLACEHOLDER>
        ;
  };
  bt_clr_0: bt_clr_0 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 0 &bt BT_CLR >;
    };
  bt_clr_1: bt_clr_1 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 1 &bt BT_CLR >;
    };
  bt_clr_2: bt_clr_2 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 2 &bt BT_CLR >;
    };
  bt_clr_3: bt_clr_3 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 3 &bt BT_CLR >;
    };
  bt_clr_4: bt_clr_4 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      bindings = < &bt BT_SEL 4 &bt BT_CLR >;
    };
  };
#+end_example

* include defines



#+NAME: includedefines
#+begin_example
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1250
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#+end_example

* default behaviors
#+NAME: defbehaviors
#+begin_example
&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE K_CANCEL>;
};

&sk {
    release-after-ms = <60000>; // tap layer key again to cancel (or wait 1 minute I guess)
    quick-release; // remove on press rather than release
};
#+end_example

* to config

#+begin_src elisp :var col_layers=Layers :results value file :file "totem.keymap"
(defun layer_idx_includes (layer_names)
  (string-join
   (seq-map-indexed
    (lambda (lyr lyr_idx)
      (format "#define LAYER_%s %d" (upcase lyr) lyr_idx)
      ) layer_names)
   "\n"))

(defun lyrtbl-keymap-part (table)
  (let* ((widths (mapcar (lambda (n)
                           (apply #'max (mapcar (lambda (row)
                                                  (length (nth n row)))
                                                table)))
                         (number-sequence 0 (1- (length (car table)))))))
    (string-join
     (mapcar (lambda (row)
               (string-join (cl-mapcar (lambda (cell width)
                                         (format (format "%%-%ds" width) cell))
                                       row widths)
                            "  "))
             table)
     "\n")))

;; (defun pad-none (keytbl)
;;   (let ((pcol (cl-mapcar #'list '("&none" "&none" "&none" ""))))
;;     (cl-mapcar #'append pcol keytbl pcol)))

(defun lyr_keymap (lyr_name)
  (format
   "    %s {\n        bindings = <\n%s\n        >;    \n    };\n"
   lyr_name
   (lyrtbl-keymap-part (org-babel-ref-resolve lyr_name))))

(defun layers_keymap (layer_names)
  (concat "  keymap {\n    compatible = \"zmk,keymap\";\n\n"
  (string-join (mapcar #'lyr_keymap layer_names) "\n")
  "  };\n"))

(defun tbl_transpose (tbl)
  (apply #'cl-mapcar #'list tbl))

(let ((layers (car (tbl_transpose col_layers))))
  (concat
   (org-babel-ref-resolve "includedefines")
   "\n"
   (layer_idx_includes layers)
   "\n"
   (org-babel-ref-resolve "defbehaviors")
   "\n/ {\n"
   (org-babel-ref-resolve "behaviors")
   "\n"
   (layers_keymap layers)
   "\n"
   (org-babel-ref-resolve "macros")
   "\n};"
   ))
#+end_src

#+RESULTS:
[[file:totem.keymap]]
